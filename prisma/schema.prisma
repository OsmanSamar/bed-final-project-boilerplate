// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // url      = env("DATABASE_URL")
  url      = "file:./dev.db" 
  relationMode      = "prisma"
  
}



model User {
  id              String  @id @default(uuid()) // Assuming ID is a string
  username        String  @unique
  password        String
  name            String
  email           String
  phoneNumber     String
  profilePicture      String
  bookings        Booking[]
  reviews         Review[]
 
}

model Review {
  id              String   @id @default(uuid()) // Assuming ID is a string
  userId          String
  propertyId      String
  rating          Int
  comment         String
  // user            User @relation(fields: [userId], references: [id])
   user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([userId])
  @@index([propertyId])
}

model Property {
  id              String  @id @default(uuid())  // Assuming ID is a string
  title           String
  description     String
  location        String
  pricePerNight   Decimal  //@mysql.Decimal(10, 2). Assuming SQLite uses its own Decimal type
  bedroomCount    Int
  bathRoomCount   Int
  maxGuestCount   Int
  hostId          String
  rating          Int
  amenities       Amenity[]    // many-to-many
  bookings        Booking[]   // 1-to-many
  reviews         Review[]   // 1-to-many
  host            Host     @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade) // 1-to-many) with Property
}

model Host {
  id               String  @id @default(uuid()) // Assuming ID is a string
  username         String  @unique
  password         String
  name             String
  email            String
  phoneNumber      String
  profilePicture       String
  aboutMe          String
  listings         Property[] // 1-to-many
  
}

model Booking {
  id              String  @id @default(uuid()) // Assuming ID is a string
  userId          String  
  propertyId      String  
  checkinDate     DateTime
  checkoutDate    DateTime
  numberOfGuests  Int
  totalPrice      Float
  bookingStatus   String
  // user            User     @relation(fields: [userId], references: [id])
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Amenity {
  id            String    @id @default(uuid()) // Assuming ID is a string
  name          String
  properties    Property[]  // many-to-many
}
